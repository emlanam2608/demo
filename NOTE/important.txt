1 .khởi tạo một trương trình ajax
$(document).ready(function(){})


2 .giống với addeventListener nhưng với ajax
$("#uploadButton").click(function(){})



3 .theo dõi state của quá trình upload hoặc bất cứ quá trình nào khác
uploadTask.on('state_changed',)

4 .sử dùng ajax mà không dùng đến method mặc định của firebase
const uploadTask = storageRef.put(file);



5 .lấy dữ liệu về và hiển thị dùng ajax
$.ajax({
    url: "YOUR_SERVER_ENDPOINT",
    method: "POST",
    data: { fileUrl: downloadURL },
    success: function(response) {
        // Xử lý phản hồi từ server
        console.log("Server response:", response);
    },
    error: function(error) {
        // Xử lý lỗi
        console.error("AJAX request failed:", error);
    }
});

6.MutationObserver
hàm cho phép theo dõi sự thay đổi của phần tử DOM


must follow step
Set up Firebase Storage:
Ensure you have Firebase initialized in your project.
Import the necessary Firebase Storage modules.
Create a reference to the file:
Use the ref function to create a reference to the file you want to upload.
Upload the file:
Use the uploadBytes method to upload the file to Firebase Storage.
Get the download URL:
After uploading, get the download URL of the file.
Use AJAX to update the web page:
Use the download URL to update your web page dynamically with AJAX.



show video sample code

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Zoom Video</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            overflow: hidden;
        }
        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s, visibility 0.3s;
        }
        .overlay.active {
            opacity: 1;
            visibility: visible;
        }
        .overlay video {
            max-width: 80%;
            max-height: 80%;
            transform: scale(0);
            transition: transform 0.3s;
        }
        .overlay.active video {
            transform: scale(1);
        }
    </style>
</head>
<body>
    <video id="myVideo" width="320" height="240" controls>
        <source src="your-video-file.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

    <div class="overlay" id="overlay">
        <video controls>
            <source src="your-video-file.mp4" type="video/mp4">
            Your browser does not support the video tag.
        </video>
    </div>

    <script>
        const video = document.getElementById('myVideo');
        const overlay = document.getElementById('overlay');

        video.addEventListener('click', () => {
            overlay.classList.add('active');
        });

        overlay.addEventListener('click', () => {
            overlay.classList.remove('active');
        });
    </script>
</body>
</html>

gán nhiều video cho 1 overolay
 videos.forEach(video => {
            video.addEventListener('click', () => {
                overlayVideo.src = video.querySelector('source').src;
                overlay.classList.add('active');
            });
        });